// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PudgeManga_Project.Data;

#nullable disable

namespace PudgeManga_Project.Data.migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("AspNetRoles", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderKey")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("RoleId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens", (string)null);
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Anime", b =>
            {
                b.Property<int>("AnimeId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnimeId"));

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Director")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Dubbing")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ImageUrl")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("ReleaseYear")
                    .HasColumnType("int");

                b.Property<string>("Studio")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Type")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("AnimeId");

                b.ToTable("Animes");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.AnimeEpisode", b =>
            {
                b.Property<int>("AnimeEpisodeId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnimeEpisodeId"));

                b.Property<int>("EpisodeNumber")
                    .HasColumnType("int");

                b.Property<string>("EpisodeUrl")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("SeasonId")
                    .HasColumnType("int");

                b.HasKey("AnimeEpisodeId");

                b.HasIndex("SeasonId");

                b.ToTable("AnimesEpisodes");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.AnimeGenre", b =>
            {
                b.Property<int>("AnimeId")
                    .HasColumnType("int");

                b.Property<int>("GenreId")
                    .HasColumnType("int");

                b.HasKey("AnimeId", "GenreId");

                b.HasIndex("GenreId");

                b.ToTable("AnimeGenre");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.AnimeSeason", b =>
            {
                b.Property<int>("AnimeSeasonId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnimeSeasonId"));

                b.Property<int>("AnimeId")
                    .HasColumnType("int");

                b.Property<int>("SeasonNumber")
                    .HasColumnType("int");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("AnimeSeasonId");

                b.HasIndex("AnimeId");

                b.ToTable("AnimeSeasons");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Chapter", b =>
            {
                b.Property<int>("ChapterId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"));

                b.Property<int>("ChapterNumber")
                    .HasColumnType("int");

                b.Property<int>("MangaID")
                    .HasColumnType("int");

                b.Property<DateTime>("PublicationDate")
                    .HasColumnType("datetime2");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Url")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("ChapterId");

                b.HasIndex("MangaID");

                b.ToTable("Chapters");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Comment", b =>
            {
                b.Property<int>("CommentId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                b.Property<int>("MangaId")
                    .HasColumnType("int");

                b.Property<int>("Rating")
                    .HasColumnType("int");

                b.Property<string>("Text")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("User")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("CommentId");

                b.HasIndex("MangaId");

                b.HasIndex("User");

                b.ToTable("Comments");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Genre", b =>
            {
                b.Property<int>("GenreId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("GenreId");

                b.ToTable("Genres");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.GenreForAnime", b =>
            {
                b.Property<int>("AnimeGenreId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnimeGenreId"));

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("AnimeGenreId");

                b.ToTable("GenresForAnimes");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Manga", b =>
            {
                b.Property<int>("MangaId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MangaId"));

                b.Property<string>("Author")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("CoverUrl")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("MangaId");

                b.ToTable("Mangas");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.MangaGenre", b =>
            {
                b.Property<int>("MangaId")
                    .HasColumnType("int");

                b.Property<int>("GenreId")
                    .HasColumnType("int");

                b.HasKey("MangaId", "GenreId");

                b.HasIndex("GenreId");

                b.ToTable("MangaGenre");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Page", b =>
            {
                b.Property<int>("PageId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PageId"));

                b.Property<int>("ChapterId")
                    .HasColumnType("int");

                b.Property<string>("ImageUrl")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("PageNumber")
                    .HasColumnType("int");

                b.HasKey("PageId");

                b.HasIndex("ChapterId");

                b.ToTable("Pages");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Popularity", b =>
            {
                b.Property<int>("MangaId")
                    .HasColumnType("int");

                b.Property<decimal>("AverageRating")
                    .HasColumnType("decimal(18,2)");

                b.Property<int>("CommentsCount")
                    .HasColumnType("int");

                b.Property<int>("ViewsCount")
                    .HasColumnType("int");

                b.HasKey("MangaId");

                b.ToTable("Popularities");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.User", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("Image")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("State")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");

                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                b.ToTable("AspNetUsers", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("PudgeManga_Project.Models.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("PudgeManga_Project.Models.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("PudgeManga_Project.Models.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("PudgeManga_Project.Models.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("PudgeManga_Project.Models.AnimeEpisode", b =>
            {
                b.HasOne("PudgeManga_Project.Models.AnimeSeason", "AnimeSeason")
                    .WithMany("AnimeEpisodes")
                    .HasForeignKey("SeasonId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("AnimeSeason");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.AnimeGenre", b =>
            {
                b.HasOne("PudgeManga_Project.Models.Anime", "Anime")
                    .WithMany("AnimeGenres")
                    .HasForeignKey("AnimeId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("PudgeManga_Project.Models.GenreForAnime", "GenreForAnime")
                    .WithMany("AnimeGenres")
                    .HasForeignKey("GenreId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Anime");

                b.Navigation("GenreForAnime");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.AnimeSeason", b =>
            {
                b.HasOne("PudgeManga_Project.Models.Anime", "Anime")
                    .WithMany("AnimeSeasons")
                    .HasForeignKey("AnimeId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Anime");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Chapter", b =>
            {
                b.HasOne("PudgeManga_Project.Models.Manga", "Manga")
                    .WithMany("Chapters")
                    .HasForeignKey("MangaID")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Manga");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Comment", b =>
            {
                b.HasOne("PudgeManga_Project.Models.Manga", "Manga")
                    .WithMany("Comments")
                    .HasForeignKey("MangaId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("PudgeManga_Project.Models.User", "Id")
                    .WithMany("Comments")
                    .HasForeignKey("User");

                b.Navigation("Id");

                b.Navigation("Manga");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.MangaGenre", b =>
            {
                b.HasOne("PudgeManga_Project.Models.Genre", "Genre")
                    .WithMany("MangaGenres")
                    .HasForeignKey("GenreId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("PudgeManga_Project.Models.Manga", "Manga")
                    .WithMany("MangaGenres")
                    .HasForeignKey("MangaId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Genre");

                b.Navigation("Manga");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Page", b =>
            {
                b.HasOne("PudgeManga_Project.Models.Chapter", "Chapter")
                    .WithMany("Pages")
                    .HasForeignKey("ChapterId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Chapter");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Popularity", b =>
            {
                b.HasOne("PudgeManga_Project.Models.Manga", "Manga")
                    .WithOne("Popularity")
                    .HasForeignKey("PudgeManga_Project.Models.Popularity", "MangaId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Manga");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Anime", b =>
            {
                b.Navigation("AnimeGenres");

                b.Navigation("AnimeSeasons");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.AnimeSeason", b =>
            {
                b.Navigation("AnimeEpisodes");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Chapter", b =>
            {
                b.Navigation("Pages");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Genre", b =>
            {
                b.Navigation("MangaGenres");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.GenreForAnime", b =>
            {
                b.Navigation("AnimeGenres");
            });

            modelBuilder.Entity("PudgeManga_Project.Models.Manga", b =>
            {
                b.Navigation("Chapters");

                b.Navigation("Comments");

                b.Navigation("MangaGenres");

                b.Navigation("Popularity")
                    .IsRequired();
            });

            modelBuilder.Entity("PudgeManga_Project.Models.User", b =>
            {
                b.Navigation("Comments");
            });
#pragma warning restore 612, 618
        }
    }
}
